---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-dns
  namespace: kube-system
  labels:
    app.kubernetes.io/name: coredns
data:
  clusterDNS: 10.43.0.10
  clusterDomain: cluster.local
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/name: coredns
data:
  Corefile: |
    .:53 {
        errors
        health {
          lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
          pods insecure
          fallthrough in-addr.arpa ip6.arpa
        }
        hosts /etc/coredns/Hosts {
          ttl 60
          reload 15s
          fallthrough
        }
        forward . 192.168.1.222 1.1.1.1 {
          max_fails 2
          policy sequential
        }
        prometheus :9153
        cache 30
        loop
        reload
        loadbalance
    }
  Hosts: |
    192.168.1.1   edge
    192.168.1.2   switch
    192.168.1.200 synology-eth1
    192.168.1.201 synology-eth2
    192.168.1.210 k3-m1
    192.168.1.211 k3-n1
    192.168.1.220 ext-lb synology.matthew-stratton.me dnd.matthew-stratton.me jellyfin.matthew-stratton.me cook.matthew-stratton.me
    192.168.1.221 int-lb grafana.matthew-stratton.me prometheus.matthew-stratton.me qbittorrent.matthew-stratton.me kuard.matthew-stratton.me whoami.matthew-stratton.me debug.matthew-stratton.me xteve.matthew-stratton.me dashy.matthew-stratton.me adguard.matthew-stratton.me
    192.168.1.222 adguard
    192.168.1.223 ns dns.matthew-stratton.me
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
  labels:
    k8s-app: kube-dns
    app.kubernetes.io/name: coredns
    app.kubernetes.io/version: 1.9.2
  name: coredns
  namespace: kube-system
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      k8s-app: kube-dns
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s-app: kube-dns
        app.kubernetes.io/name: coredns
    spec:
      containers:
      - name: coredns
        args:
        - -conf
        - /etc/coredns/Corefile
        image: coredns/coredns:1.9.3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/coredns
          name: config-volume
          readOnly: true
      dnsPolicy: Default
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      serviceAccount: coredns
      serviceAccountName: coredns
      terminationGracePeriodSeconds: 30
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
        operator: Exists
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
        operator: Exists
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            k8s-app: kube-dns
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: Corefile
            path: Corefile
          - key: Hosts
            path: Hosts
          name: coredns
        name: config-volume
