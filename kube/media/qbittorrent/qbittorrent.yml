---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qbittorrent-config
  namespace: media
data:
  PUID: "111"
  PGID: "321"
  UMASK: "002"
  TZ: "America/New_York"
  VPN_SERVICE_PROVIDER: "surfshark"
  VPN_TYPE: "wireguard"
  SERVER_HOSTNAMES: "us-clt.prod.surfshark.com"
  UPDATER_PERIOD: "24h"
  WIREGUARD_ADDRESSES: "10.14.0.2/16" # from VPN provider Wireguard config
  FIREWALL: "off"
  DOT: "off"
  LOG_LEVEL: "debug"
  #DOT_VERBOSITY: "5"
  #DOT_VERBOSITY_DETAILS: "4"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qbittorrent
  namespace: media
  labels:
    app.kubernetes.io/name: qbittorrent
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: qbittorrent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qbittorrent
      annotations:
        diun.enable: "true"
    spec:
      terminationGracePeriodSeconds: 30

      # without this external DNS lookups fail with my setup (api.radarr.video => api.radarr.video.matthew-stratton.me)
      # https://pracucci.com/kubernetes-dns-resolution-ndots-options-and-why-it-may-affect-application-performances.html
      dnsConfig:
        options:
          - name: ndots
            value: "1"

      containers:
        # https://hub.docker.com/r/linuxserver/qbittorrent/tags
        - name: qbittorrent
          image: linuxserver/qbittorrent:4.6.5
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          envFrom:
            - configMapRef:
                name: qbittorrent-config
                optional: false
          ports:
            - containerPort: 8080
              name: web-ui
              protocol: TCP
            - containerPort: 6881
              name: torrent-tcp
              protocol: TCP
            - containerPort: 6881
              name: torrent-udp
              protocol: UDP
          volumeMounts:
            - mountPath: "/config"
              name: qbittorrent-config
            - mountPath: /downloads
              name: data

        # to test its working start a debug pod and run `curl https://ipinfo.io` and you should not see your home IP address
        # > kubectl -n media exec -it `kubectl -n media get pods -l app.kubernetes.io/name=qbittorrent -o name` -- bash
        # > curl https://ipinfo.io
        - name: gluetun
          # https://hub.docker.com/r/qmcgaw/gluetun/tags
          image: ghcr.io/qdm12/gluetun:v3.38
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          envFrom:
            - configMapRef:
                name: qbittorrent-config
                optional: false
            - secretRef:
                name: vpn-credentials # WIREGUARD_PRIVATE_KEY=...
                optional: false
          ports:
            - containerPort: 9999
              name: gluetun-health
              protocol: TCP
          volumeMounts:
            - name: tunnel
              mountPath: /dev/net/tun
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: 9999
          #  initialDelaySeconds: 30
          #  timeoutSeconds: 30
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: 9999
          #  initialDelaySeconds: 30
          #  timeoutSeconds: 10
      volumes:
        - name: qbittorrent-config
          persistentVolumeClaim:
            claimName: qbittorrent-config
        - name: data
          nfs: # data folder is a mounted pre-existing NFS share, *not* a PV/PVC
            server: 192.168.1.200
            path: /volume1/Media/torrents
        - name: tunnel
          hostPath:
            path: /dev/net/tun
